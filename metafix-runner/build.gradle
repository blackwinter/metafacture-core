plugins {
  id 'application'
}

dependencies {
  implementation project(':metafix')

  implementation "org.metafacture:metafacture-biblio:${versions.metafacture}"
  implementation "org.metafacture:metafacture-json:${versions.metafacture}"
  implementation "org.metafacture:metafacture-runner:${versions.metafacture}"
  implementation "org.metafacture:metafacture-xml:${versions.metafacture}"
  implementation "org.metafacture:metafacture-formeta:${versions.metafacture}"
  implementation "org.metafacture:metafacture-triples:${versions.metafacture}"
  implementation "org.metafacture:metafacture-strings:${versions.metafacture}"
  implementation "org.metafacture:metafacture-formatting:${versions.metafacture}"
  implementation "org.metafacture:metafacture-monitoring:${versions.metafacture}"
  implementation "org.metafacture:metafacture-csv:${versions.metafacture}"
  implementation "org.metafacture:metafacture-yaml:${versions.metafacture}"
  implementation "org.metafacture:metafacture-html:${versions.metafacture}"
}

application {
  mainClass = 'org.metafacture.runner.Flux'

  if (project.hasProperty('profile')) {
    def file = project.getProperty('profile') ?: project.name
    def depth = project.hasProperty('profile.depth') ? project.getProperty('profile.depth') : 8
    def cutoff = project.hasProperty('profile.cutoff') ? project.getProperty('profile.cutoff') : 0.001

    applicationDefaultJvmArgs = ["-agentlib:hprof=heap=sites,cpu=samples,depth=${depth},cutoff=${cutoff},file=${file}.hprof.txt"]
  }
}
