/*
 * generated by Xtext 2.17.0
 */
package org.metafacture.fix.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.metafacture.fix.fix.Fix

@ExtendWith(InjectionExtension)
@InjectWith(FixInjectorProvider)
class FixParsingTest {
	@Inject
	ParseHelper<Fix> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			# FIX is a macro-language for data transformations
			
			# Simple fixes
			
			add_field(hello,world)
			remove_field(my.deep.nested.junk)
			copy_field(stats,output.$append)
			
			# Conditionals
			
			if exists(error)
				set_field(is_valid, no)
				log(error)
			elsif exists(warning)
				set_field(is_valid, yes)
				log(warning)
			else
				set_field(is_valid, yes)
			end
			
			# Loops
			
			do list(path)
				add_field(foo,bar)
			end
			
			# Nested expressions
			
			do marc_each()
				if marc_has(f700)
					marc_map(f700a,authors.$append)
				end
			end
		''')
		println("Result: " + result)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
