/**
 * generated by Xtext 2.17.0
 */
package org.metafacture.fix.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.metafacture.fix.fix.Fix;
import org.metafacture.fix.tests.FixInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(FixInjectorProvider.class)
@SuppressWarnings("all")
public class FixParsingTest {
  @Inject
  private ParseHelper<Fix> parseHelper;

  @Test
  public void load0() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("map(a,b)");
    this.loadModel(_builder.toString());
  }

  @Test
  public void load1() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# simple field name mappings");
    _builder.newLine();
    _builder.newLine();
    _builder.append("map(a,b)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# nested field structure");
    _builder.newLine();
    _builder.newLine();
    _builder.append("map(e1)");
    _builder.newLine();
    _builder.append("map(e1.e2)");
    _builder.newLine();
    _builder.append("map(e1.e2.d)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# pass-through for unmapped fields");
    _builder.newLine();
    _builder.newLine();
    _builder.append("map(_else)");
    _builder.newLine();
    this.loadModel(_builder.toString());
  }

  @Test
  public void load2() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# FIX is a macro-language for data transformations");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Simple fixes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("add_field(hello,world)");
    _builder.newLine();
    _builder.append("remove_field(my.deep.nested.junk)");
    _builder.newLine();
    _builder.append("copy_field(stats,output.$append)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Conditionals");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if exists(error)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set_field(is_valid, no)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("log(error)");
    _builder.newLine();
    _builder.append("elsif exists(warning)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set_field(is_valid, yes)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("log(warning)");
    _builder.newLine();
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set_field(is_valid, yes)");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Loops");
    _builder.newLine();
    _builder.newLine();
    _builder.append("do list(path)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("add_field(foo,bar)");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Nested expressions");
    _builder.newLine();
    _builder.newLine();
    _builder.append("do marc_each()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if marc_has(f700)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("marc_map(f700a,authors.$append)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("end");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    this.loadModel(_builder.toString());
  }

  public void loadModel(final String fix) {
    try {
      final Fix result = this.parseHelper.parse(fix);
      InputOutput.<String>println(("Result: " + result));
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder.append(_join);
      Assertions.assertTrue(_isEmpty, _builder.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
